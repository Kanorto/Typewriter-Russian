"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([["11309"],{93181:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>a,default:()=>o,toc:()=>c,metadata:()=>i,assets:()=>d,contentTitle:()=>h});var i=JSON.parse('{"id":"develop/extensions/api-changes/0.9","title":"0.9.X API changes","description":"---","source":"@site/docs/develop/02-extensions/09-api-changes/0.9.mdx","sourceDirName":"develop/02-extensions/09-api-changes","slug":"/develop/extensions/api-changes/0.9","permalink":"/beta/develop/extensions/api-changes/0.9","draft":false,"unlisted":false,"editUrl":"https://github.com/gabber235/Typewriter/tree/develop/documentation/docs/develop/02-extensions/09-api-changes/0.9.mdx","tags":[],"version":"current","lastUpdatedBy":"Gabber235","lastUpdatedAt":1749994205000,"frontMatter":{"title":"0.9.X API changes"},"sidebar":"develop","previous":{"title":"0.8.X API Changes","permalink":"/beta/develop/extensions/api-changes/0.8"}}'),r=t(85893),s=t(50065);let a={title:"0.9.X API changes"},h=void 0,d={},c=[{value:"title: 0.9.X API changes",id:"title-09x-api-changes",level:2},{value:"<code>ThreadType</code> Deprecation",id:"threadtype-deprecation",level:2},{value:"Primary Bukkit Thread",id:"primary-bukkit-thread",level:3},{value:"Async Bukkit Thread",id:"async-bukkit-thread",level:3},{value:"Async Typewriter Thread Pool",id:"async-typewriter-thread-pool",level:3}];function l(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"title-09x-api-changes",children:"title: 0.9.X API changes"}),"\n",(0,r.jsx)(n.h1,{id:"09x-api-changes",children:"0.9.X API changes"}),"\n",(0,r.jsxs)(n.h2,{id:"threadtype-deprecation",children:[(0,r.jsx)(n.code,{children:"ThreadType"})," Deprecation"]}),"\n",(0,r.jsxs)(n.p,{children:["Originally, ",(0,r.jsx)(n.code,{children:"ThreadType"})," was used to invoke the coroutine context for different processes in Typewriter.\nThis is now deprecated in favor of actual coroutines dispatchers and contexts."]}),"\n",(0,r.jsx)(n.h3,{id:"primary-bukkit-thread",children:"Primary Bukkit Thread"}),"\n",(0,r.jsx)(n.p,{children:"This operates on the Paper main thread and should be used for all Paper API interactions."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"// highlight-red\nThreadType.SYNC.launch {}\n// highlight-green\nDispatchers.Sync.launch {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"async-bukkit-thread",children:"Async Bukkit Thread"}),"\n",(0,r.jsx)(n.p,{children:"This executes on the asynchronous Paper thread, suitable for tasks without strict timing requirements or those intended for the Paper scheduler."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"// highlight-red\nThreadType.ASYNC.launch {}\n// highlight-green\nDispatchers.TickedAsync.launch {}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"async-typewriter-thread-pool",children:"Async Typewriter Thread Pool"}),"\n",(0,r.jsx)(n.p,{children:"Utilize the Typewriter thread pool for time-sensitive tasks.\nAs the most asynchronous of the three dispatchers and independent of the paper scheduler, it continues operating even during scheduler lag."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",metastring:"showLineNumbers",children:"// highlight-red\nThreadType.DISPATCHERS_ASYNC.launch {}\n// highlight-green\nDispatchers.UntickedAsync.launch {}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If working in ",(0,r.jsx)(n.strong,{children:"IntelliJ"}),", it will automatically suggest the correct replacements."]})]})}function o(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);